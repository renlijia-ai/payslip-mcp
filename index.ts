#!/usr/bin/env node

import { Server } from "@modelcontextprotocol/sdk/server/index.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import {
  CallToolRequestSchema,
  ListToolsRequestSchema,
  Tool,
} from "@modelcontextprotocol/sdk/types.js";
import fetch from "node-fetch";

// ts
type IBillItem = {
  itemId: string;
  itemName: string;
  viewByUser: boolean;
};
interface ISaveRequest {
  paySalaryItem: IBillItem;
  billItemGroups: [
    {
      billItems: IBillItem[];
    }
  ];
  feedback: boolean;
  handSign: boolean;
  warmTip: boolean;
  selectHides: [];
  warmTipContent: string;
  enableSubTitle: boolean;
  robotAnswer: string;
  templateId: string;
  billMonth: string;
  editType: string;
  billFormId: string;
  feedbackUserId: string;
  yearReportFlag: number;
  billFormName: string;
}

interface ISettingResponse {
  billFormId: string;
  billFormMonth: string;
  billFormName: string;
  billItemGroups: [
    {
      billItems: IBillItem[];
    }
  ];
  changeBillFormMonth: boolean;
  changeBillFormName: boolean;
  changeHandSign: boolean;
  changePaySalaryItem: boolean;
  feedback: boolean;
  feedbackAvatar: string;
  feedbackName: string;
  feedbackUserId: string;
  hasOpenHandSign: boolean;
  hasSendBill: boolean;
  match: boolean;
  notPaySalaryItemIds: string[];
  paySalaryItem: IBillItem;
  previewData: Record<string, string>;
  previewName: string;
  warmTip: boolean;
  warmTipContent: string;
  yearReportFlag: number;
}

// Server ÂºÄÂßã
const server = new Server(
  {
    name: "mcp-server/baidu-map",
    version: "0.0.1",
  },
  {
    capabilities: {
      tools: {},
    },
  }
);

const MAPS_TOOLS: Tool[] = [
  {
    name: "payslip_send_bill",
    description: "ÂèëÈÄÅ‰∏Ä‰∏™‰∫∫ÁöÑÂ∑•ËµÑÊù°",
    inputSchema: {
      type: "object",
      properties: {
        rljN: {
          type: "string",
          description: "ÁôªÂΩïtoken",
        },
        billMonth: {
          type: "string",
          description: "Â∑•ËµÑÊù°Êúà‰ªΩÔºàÊ†ºÂºèÔºöYYYY-MM)",
        },
        salaryGroupId: {
          type: "string",
          description: "Â∑•ËµÑÊù°id",
        },
        userId: {
          type: "string",
          description: "ÂëòÂ∑•id",
        },
      },
      required: ["billMonth", "salaryGroupId", "userId", "rljN"],
    },
  },
  {
    name: "payslip_upload_bill",
    description: "‰∏ä‰º†Â∑•ËµÑÊù°",
    inputSchema: {
      type: "object",
      properties: {
        rljN: {
          type: "string",
          description: "ÁôªÂΩïtoken",
        },
        file: {
          type: "string",
          description: "‰∏ä‰º†Êñá‰ª∂ÁöÑossÂú∞ÂùÄ",
        },
      },
      required: ["file", "rljN"],
    },
  },
  {
    name:"queryBillByMonth",
    description:"ÊåâÊúà‰ªΩÊü•ËØ¢Â∑•ËµÑÊù°‰ø°ÊÅØÔºàÂèØ‰ª•Êü•ËØ¢Âà∞ÁöÑÊï∞ÊçÆ Â∑•ËµÑÊù°ÂêçÁß∞„ÄÅÂ∑≤ÂèëÈÄÅÊï∞Èáè„ÄÅÂ∑≤Êü•ÁúãÊï∞Èáè „ÄÅÂ∑≤Á°ÆËÆ§Ê¢≥ÁêÜ Ôºâ",
    inputSchema:{
      type: "object",
      properties: {
        rljN: {
          type: "string",
          description: "ÁôªÂΩïtoken",
        } , billMonth: {
          type: "string",
          description: "Â∑•ËµÑÊù°Êúà‰ªΩÔºàÊ†ºÂºèÔºöYYYY-MM)",
        },pageSize:{
          type:"string",
          description:"ÂàÜÈ°µÊï∞Èáè ÈªòËÆ§‰∏∫ 5",
        },startId:{
          type:"string",
          description:"Êü•ËØ¢ÁöÑËµ∑Âßã‰ΩçÁΩÆ ‰∏ä‰∏Ä‰∏™ÂàóË°®ÁªìÊûúÁöÑ‰∏≠ÊúÄÂêé‰∏Ä‰∏™Êï∞ÊçÆÁöÑ id",
        }
    }
  }
},
{
  name:"Ê†πÊçÆ‰∫∫Âëò„ÄÅÈÉ®Èó®„ÄÅÂèëÈÄÅÁä∂ÊÄÅ„ÄÅÊü•ÁúãÁä∂ÊÄÅ„ÄÅÁ°ÆËÆ§Áä∂ÊÄÅ„ÄÅÁ≠õÈÄâÂ∑•ËµÑÊù°ËØ¶ÊÉÖ‰∏≠ÁöÑÊï∞ÊçÆ ",
  description:"",
  inputSchema:{
    type: "object",
    roperties: {
      rljN: {
        type: "string",
        description: "ÁôªÂΩïtoken",
      },billMonth:{
        type:"string",
        description: "Â∑•ËµÑÊù°Êúà‰ªΩÔºàÊ†ºÂºèÔºöYYYY-MM)",
      },billSource:{
        type:"string",
        description: "0-Ëñ™ËµÑËÆ°ÁÆóÔºå1-excelÂØºÂÖ•",
      },search:{
        type:"string",
        description:"ÊåâÂßìÂêç„ÄÅÂ∑•Âè∑„ÄÅËÅå‰ΩçÁ≠õÈÄâ"
      },sendStatus:{
        type:"string",
        description:"Â∑•ËµÑÊù°ÂèëÈÄÅÁä∂ÊÄÅÔºåÈÄóÂè∑ÈöîÂºÄ 0 Êú™ÂèëÈÄÅ „ÄÅ1 Â∑≤ÂèëÈÄÅ„ÄÅ 2 Â∑≤Êí§Âõû"
      },readStatus:{
        type:"string",
        description:"Â∑•ËµÑÊù°Êü•ÁúãÁä∂ÊÄÅÔºåÈÄóÂè∑ÈöîÂºÄ  0 Êú™ËØª„ÄÅ1 Â∑≤ËØª"
      },confirmStatus:{
        type:"string",
        description:"Â∑•ËµÑÊù°Á°ÆËÆ§Áä∂ÊÄÅÔºåÈÄóÂè∑ÈöîÂºÄ 0 Êú™ËØª 1 Â∑≤ËØª"
      },salaryGroupId:{
        type:"string",
        description:"Ëñ™ËµÑÁªÑsalarygroupidÊàñËÄÖexcelÂØºÂÖ•ÁöÑbillformid"
      },
    }
  }

},
] as const;

server.setRequestHandler(ListToolsRequestSchema, async () => ({
  tools: MAPS_TOOLS,
}));

// ÂèëÈÄÅÂ∑•ËµÑÊù°
const handleSendBill = async (params: any) => {
  params.allFlag = 0;
  params.billSource = "1";

  const response = await fetch(
    "https://daily-payslip.renlijia.com/rest/api/v2/salaryBill/sendSalaryBill",
    {
      method: "post",
      headers: {
        "rlj-n": params.rljN,
      },
      body: JSON.stringify(params),
    }
  );
  const data: any = await response.json();

  return {
    content: [
      {
        type: "text",
        text: data.success ? "ÊàêÂäü" : "Â§±Ë¥•",
      },
    ],
    isError: data.success,
  };
};
// ‰∏ä‰º†Â∑•ËµÑÊù°
const handleUploadBill = async (file: string, rljN: string) => {
  const fileResponse = await fetch(file);
  const fileBlob = await fileResponse.blob();
  const formData = new FormData();
  formData.append("file", fileBlob, "2.xlsx");

  const url = new URL(
    "https://daily-payslip.renlijia.com/rest/api/v1/import/paySlip/parseExcel"
  );
  const searchParams = url.searchParams;
  searchParams.append("matchType", "userId");
  searchParams.append("sheetNumber", "undefined");
  searchParams.append("baseImportType", "bill");

  const response = await fetch(url.toString(), {
    method: "post",
    headers: {
      "rlj-n": rljN,
    },
    body: formData,
  });
  const data: any = await response.json();
  const { billFormId, paySalaryItemIndex }: any = data.result;
  await handleMatchExcel(billFormId, paySalaryItemIndex, rljN);
  const billSetting = await handleGetBillSetting(billFormId, rljN);
  const res = await handleSaveBill(billSetting, rljN);

  return {
    content: [
      {
        type: "text",
        text: res.result ? "ÊàêÂäüüëåüèª" : "Â§±Ë¥•√ó",
      },
    ],
    isError: !res.result,
  };
};
// ÂåπÈÖçexcelËñ™ËµÑÈ°π
const handleMatchExcel = async (
  billFormId: string,
  paySalaryItemIndex: string,
  rljN: string
) => {
  const params: any = { billFormId, paySalaryItemIndex };

  const response = await fetch(
    "https://daily-payslip.renlijia.com/rest/api/v1/import/paySlip/matchExcelData",
    {
      method: "post",
      headers: {
        "rlj-n": rljN,
      },
      body: JSON.stringify(params),
    }
  );
  const data: any = await response.json();
  return data;
};
// Ëé∑ÂèñÂ∑•ËµÑÊù°ËÆæÁΩÆ
const handleGetBillSetting = async (
  billFormId: string,
  rljN: string
): Promise<ISettingResponse> => {
  const params: any = { billFormId, templateId: "" };

  const response = await fetch(
    "https://daily-payslip.renlijia.com/rest/api/v1/salaryBill/queryImportedSalaryBillSetting",
    {
      method: "post",
      headers: {
        "rlj-n": rljN,
      },
      body: JSON.stringify(params),
    }
  );
  const data: any = await response.json();
  return data.result;
};
// ‰øùÂ≠òÂ∑•ËµÑÊù°
const handleSaveBill = async (
  settingResponse: ISettingResponse,
  rljN: string
) => {
  const params: ISaveRequest = {
    billFormId: settingResponse.billFormId,
    billFormName: settingResponse.billFormName + "_jfjfjf",
    billItemGroups: settingResponse.billItemGroups,
    billMonth: settingResponse.billFormMonth,
    editType: "import",
    enableSubTitle: true,
    feedback: true,
    feedbackUserId: settingResponse.feedbackUserId,
    handSign: false,
    paySalaryItem: settingResponse.paySalaryItem,
    robotAnswer: "notShow",
    selectHides: [],
    templateId: "",
    warmTip: true,
    warmTipContent: "Â∑•ËµÑÊù°Â±û‰∫éÊïèÊÑü‰ø°ÊÅØÔºåËØ∑Ê≥®ÊÑè‰øùÂØÜ",
    yearReportFlag: 1,
  };

  const response = await fetch(
    "https://daily-payslip.renlijia.com/rest/api/v1/paySlip/saveImportedSalaryBill",
    {
      method: "post",
      headers: {
        "rlj-n": rljN,
      },
      body: JSON.stringify(params),
    }
  );
  const data: any = await response.json();
  return data;
};
// Êü•ËØ¢Â∑•ËµÑÊù°ÂàóË°® 
const handleQueryBillByMonth =async(params:any)=>{
  const response=await fetch(
    "https://daily-payslip.renlijia.com/rest/api/v2/salaryBill/sendSalaryBill",
    {
      method:"post",
      headers:{
        "rlj-n":params.rljN,
      },
      body:JSON.stringify(params),
    }
  );
  const data:any=await response.json;

  return {
    content: formatContent(data.result, data.success),
    isError: !data.success,
  }
};

// Á≠õÈÄâÂ∑•ËµÑÊù°ËØ¶ÊÉÖ‰∏≠ÁöÑÂëòÂ∑•
const querySalaryBillByPage=async(params:any)=>{
  const response=await fetch(
    "https://daily-payslip.renlijia.com/rest/api/v2/salaryBill/sendSalaryBill",
    {
      method:"post",
      headers:{
        "rlj-n":params.rljN,
      },
      body:JSON.stringify(params),
    }
  );
  const  data:any = await response.json;
  return {
    content: formatContent2(data.result,data.success),
    isError: !data.success,
  }

}



server.setRequestHandler(CallToolRequestSchema, async (request) => {
  try {
    switch (request.params.name) {
      case "payslip_send_bill": {
        return await handleSendBill({ ...request.params.arguments });
      }
      case "payslip_upload_bill": {
        const { file, rljN }: any = request.params.arguments;
        return await handleUploadBill(file, rljN);
      }
      default:
        return {
          content: [
            {
              type: "text",
              text: `Unknown tool: ${request.params.name}`,
            },
          ],
          isError: true,
        };
    }
  } catch (error) {
    return {
      content: [
        {
          type: "text",
          text: `Error: ${
            error instanceof Error ? error.message : String(error)
          }`,
        },
      ],
      isError: true,
    };
  }
});

async function runServer() {
  const transport = new StdioServerTransport();
  await server.connect(transport);
  console.error("Baidu Map MCP Server running on stdio");
}

runServer().catch((error) => {
  console.error("Fatal error running server:", error);
  process.exit(1);
});

// ËæÖÂä©ÂáΩÊï∞ÔºöÂ∞ÜÊï∞ÊçÆÊ†ºÂºèÂåñ‰∏∫ÂâçÁ´ØÈúÄË¶ÅÁöÑÊñáÊú¨ÂÜÖÂÆπ
function formatContent(result:any, isSuccess:boolean) {
  const contents = [];

  if (!isSuccess) {
    // Êé•Âè£Â§±Ë¥•Êó∂ÔºåÊòæÁ§∫ÈîôËØØ‰ø°ÊÅØÔºàÂÅáËÆæ data ‰∏≠Êúâ error Â≠óÊÆµÔºâ
    contents.push({
      type: "text",
      text: "Êìç‰ΩúÂ§±Ë¥•ÔºåËØ∑Ê£ÄÊü•ÂèÇÊï∞ÊàñËÅîÁ≥ªÁÆ°ÁêÜÂëò",
    });
  } else {
    // ÈÅçÂéÜ result Êï∞ÁªÑÔºå‰∏∫ÊØè‰∏™Â∑•ËµÑÊù°ÁîüÊàêÊñáÊú¨
    result.forEach((item: any)  => {
      contents.push({
        type: "text",
        text: `Â∑•ËµÑÊù°Id„Äê${item.id}„ÄëÂ∑•ËµÑÊù°ÂêçÁß∞„Äê${item.salaryBillName}„ÄëÔºåÊÄª‰∫∫Êï∞Ôºö${item.allUserNum} Â∑≤ÂèëÈÄÅ‰∫∫Êï∞Ôºö${item.sentUserNum}Ôºå Â∑≤Êü•Áúã‰∫∫Êï∞Ôºö${item.readUserNum}Ôºå Ëñ™ÈÖ¨ salaryBillId:${item.salaryBillId}`,
      });
    });
  }

  return contents;
}

// ËæÖÂä©ÂáΩÊï∞ÔºöÂ∞ÜÊï∞ÊçÆÊ†ºÂºèÂåñ‰∏∫ÂâçÁ´ØÈúÄË¶ÅÁöÑÊñáÊú¨ÂÜÖÂÆπ
function formatContent2(result:any, isSuccess:boolean) {
  const contents = [];

  if (!isSuccess) {
    // Êé•Âè£Â§±Ë¥•Êó∂ÔºåÊòæÁ§∫ÈîôËØØ‰ø°ÊÅØÔºàÂÅáËÆæ data ‰∏≠Êúâ error Â≠óÊÆµÔºâ
    contents.push({
      type: "text",
      text: "Êìç‰ΩúÂ§±Ë¥•ÔºåËØ∑Ê£ÄÊü•ÂèÇÊï∞ÊàñËÅîÁ≥ªÁÆ°ÁêÜÂëò",
    });
  } else {
    // ÈÅçÂéÜ result Êï∞ÁªÑÔºå‰∏∫ÊØè‰∏™Â∑•ËµÑÊù°ÁîüÊàêÊñáÊú¨
    result.data.forEach((item: any)  => {
      contents.push({
        type: "text",
        text: `ÂëòÂ∑•id„Äê${item.userId}„ÄëÂëòÂ∑•ÂßìÂêç„Äê${item.userName},ÂèëÈÄÅÊó∂Èó¥ ${item.readTime} ÈÉ®Èó®${item.deptName}`,
      });
    });
  }

  return contents;
}


